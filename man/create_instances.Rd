% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_instance.R
\name{create_instances}
\alias{create_instances}
\title{Create Instances of an Object}
\usage{
create_instances(
  ray_scene,
  x = 0,
  y = 0,
  z = 0,
  angle_x = 0,
  angle_y = 0,
  angle_z = 0,
  material = diffuse(),
  angle = c(0, 0, 0),
  order_rotation = c(1, 2, 3),
  flipped = FALSE,
  scale = c(1, 1, 1)
)
}
\arguments{
\item{ray_scene}{A `ray_scene` object to be copied at the specified transformed coordinates.}

\item{x}{Default `0`. A vector x-coordinates to offset the instances.}

\item{y}{Default `0`. A vector y-coordinates to offset the instances.}

\item{z}{Default `0`. A vector z-coordinates to offset the instances.}

\item{material}{Default  \code{\link{diffuse}}.The material, called from one of the material 
functions \code{\link{diffuse}}, \code{\link{metal}}, or \code{\link{dielectric}}.}

\item{angle}{Default `c(0, 0, 0)`. Angle of rotation around the x, y, and z axes, applied in the order specified in `order_rotation`.}

\item{order_rotation}{Default `c(1, 2, 3)`. The order to apply the rotations, referring to "x", "y", and "z".}

\item{flipped}{Default `FALSE`. Whether to flip the normals.}

\item{scale}{Default `c(1, 1, 1)`. Scale transformation in the x, y, and z directions. If this is a single value,
number, the object will be scaled uniformly. Note: emissive objects may not currently function correctly when scaled.}
}
\value{
Single row of a tibble describing the obj model in the scene.
}
\description{
This creates multiple instances of the `ray_scene` passed, each with it's own transformation applied (measured
from the origin of the ray_scene). This means the scene only uses the memory of the object once and each 
copy only requires a 4x4 matrix in memory.
}
\examples{
#Load the included example R object file, by calling the r_obj() function. This
#returns the local file path to the `r.txt` obj file. The file extension is "txt" 
#due to package constraints, but the file contents are identical and it does not 
#affect the function.

}
